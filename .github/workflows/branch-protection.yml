name: Setup Branch Protection

on:
  workflow_dispatch: # ÊâãÂãïÂÆüË°å
  push:
    branches: [main]
    paths: [".github/workflows/branch-protection.yml"]

jobs:
  setup-branch-protection:
    runs-on: ubuntu-latest
    if: github.repository_owner != 'github' # „Éá„É¢Áî®„ÅÆÂà∂Èôê

    steps:
      - name: Setup branch protection for main
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;

            try {
              await github.rest.repos.updateBranchProtection({
                owner,
                repo,
                branch: 'main',
                required_status_checks: {
                  strict: true,
                  contexts: [
                    'branch-protection',
                    'test-backend',
                    'test-frontend', 
                    'security-scan',
                    'integration-test'
                  ]
                },
                enforce_admins: false,
                required_pull_request_reviews: {
                  dismiss_stale_reviews: true,
                  require_code_owner_reviews: true,
                  required_approving_review_count: 1,
                  bypass_pull_request_allowances: {
                    users: [],
                    teams: [],
                    apps: []
                  }
                },
                restrictions: null,
                allow_force_pushes: false,
                allow_deletions: false,
                block_creations: false,
                required_conversation_resolution: true
              });
              
              console.log('‚úÖ Branch protection rules updated for main branch');
            } catch (error) {
              console.error('‚ùå Failed to update branch protection:', error.message);
              
              // Êó¢Â≠ò„ÅÆ„É´„Éº„É´„ÇíÁ¢∫Ë™ç
              try {
                const protection = await github.rest.repos.getBranchProtection({
                  owner,
                  repo,
                  branch: 'main'
                });
                console.log('Current protection rules:', protection.data);
              } catch (e) {
                console.log('No existing protection rules found');
              }
              
              throw error;
            }

      - name: Setup branch protection for develop
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;

            try {
              await github.rest.repos.updateBranchProtection({
                owner,
                repo,
                branch: 'develop',
                required_status_checks: {
                  strict: true,
                  contexts: [
                    'test-backend',
                    'test-frontend',
                    'security-scan'
                  ]
                },
                enforce_admins: false,
                required_pull_request_reviews: {
                  dismiss_stale_reviews: true,
                  require_code_owner_reviews: false,
                  required_approving_review_count: 1,
                  bypass_pull_request_allowances: {
                    users: [],
                    teams: [],
                    apps: []
                  }
                },
                restrictions: null,
                allow_force_pushes: false,
                allow_deletions: false,
                block_creations: false,
                required_conversation_resolution: true
              });
              
              console.log('‚úÖ Branch protection rules updated for develop branch');
            } catch (error) {
              console.error('‚ùå Failed to update branch protection:', error.message);
              
              if (error.status === 404) {
                console.log('‚ÑπÔ∏è  develop branch does not exist yet - protection will be applied when created');
              } else {
                throw error;
              }
            }

      - name: Create CODEOWNERS file
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;

            const codeownersContent = `# „Ç≥„Éº„Éâ„Ç™„Éº„Éä„ÉºË®≠ÂÆö
            # Ë©≥Á¥∞: https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners

            # „Éá„Éï„Ç©„É´„ÉàÔºàÂÖ®„Éï„Ç°„Ç§„É´Ôºâ
            * @${owner}

            # „Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ
            /backend/ @${owner}
            /api/ @${owner}
            /database/ @${owner}

            # „Éï„É≠„É≥„Éà„Ç®„É≥„Éâ  
            /frontend/ @${owner}

            # „Ç§„É≥„Éï„É©„ÉªCI/CD
            /infrastructure/ @${owner}
            /.github/ @${owner}
            /docker-compose.yml @${owner}
            /Dockerfile* @${owner}

            # „Éâ„Ç≠„É•„É°„É≥„Éà
            /README.md @${owner}
            /docs/ @${owner}
            `;

            try {
              // Êó¢Â≠ò„ÅÆCODEOWNERS„Éï„Ç°„Ç§„É´„ÇíÁ¢∫Ë™ç
              let sha;
              try {
                const existing = await github.rest.repos.getContent({
                  owner,
                  repo,
                  path: '.github/CODEOWNERS'
                });
                sha = existing.data.sha;
              } catch (e) {
                // „Éï„Ç°„Ç§„É´„ÅåÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥Âêà
                sha = undefined;
              }
              
              // CODEOWNERS„Éï„Ç°„Ç§„É´„Çí‰ΩúÊàê„Åæ„Åü„ÅØÊõ¥Êñ∞
              await github.rest.repos.createOrUpdateFileContents({
                owner,
                repo,
                path: '.github/CODEOWNERS',
                message: 'Add/Update CODEOWNERS file',
                content: Buffer.from(codeownersContent).toString('base64'),
                sha
              });
              
              console.log('‚úÖ CODEOWNERS file created/updated');
            } catch (error) {
              console.error('‚ùå Failed to create CODEOWNERS:', error.message);
            }

      - name: Summary
        run: |
          echo "## üõ°Ô∏è Branch Protection Setup Complete"
          echo ""
          echo "### Main Branch Protection:"
          echo "- ‚úÖ Requires PR with 1 approval"
          echo "- ‚úÖ Requires all CI checks to pass"
          echo "- ‚úÖ Requires code owner review"
          echo "- ‚úÖ Dismisses stale reviews"
          echo "- ‚úÖ Requires conversation resolution"
          echo "- ‚ùå No force pushes allowed"
          echo "- ‚ùå No direct pushes allowed"
          echo ""
          echo "### Develop Branch Protection:"
          echo "- ‚úÖ Requires PR with 1 approval"
          echo "- ‚úÖ Requires backend/frontend/security tests"
          echo "- ‚úÖ Requires conversation resolution"
          echo ""
          echo "### Next Steps:"
          echo "1. Create 'develop' branch if it doesn't exist"
          echo "2. Use 'develop/feature-name' pattern for feature branches"
          echo "3. Only merge to main from 'develop/' branches"
