name: CI Pipeline

on:
  pull_request:
    branches: [main, "develop/**"]
    types: [opened, synchronize, reopened]
  push:
    branches: [main]

env:
  NODE_VERSION: "18"
  GO_VERSION: "1.24"

jobs:
  # 必須チェック: ブランチ名・変更検出
  essential-checks:
    # PRが存在する場合はpull_requestトリガーのみ、そうでなければpushトリガーで実行
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
      infrastructure: ${{ steps.changes.outputs.infrastructure }}
    steps:
      # ブランチ名チェック（mainへのPRのみ）
      - name: Check branch naming convention
        if: github.event_name == 'pull_request' && github.base_ref == 'main'
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          echo "Checking branch name: $BRANCH_NAME"

          if [[ ! "$BRANCH_NAME" =~ ^develop/.+ ]]; then
            echo "❌ Error: Pull requests to main branch must come from 'develop/' branches"
            echo "Current branch: $BRANCH_NAME"
            echo "Expected pattern: develop/feature-name"
            exit 1
          fi

          echo "✅ Branch name follows convention: $BRANCH_NAME"

      - uses: actions/checkout@v4

      # 変更ファイル検出
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
              - 'api/**'
              - 'database/**'
              - 'go.mod'
              - 'go.sum'
            frontend:
              - 'frontend/**'
              - 'package*.json'
            infrastructure:
              - 'infrastructure/**'
              - 'docker-compose.yml'
              - 'Dockerfile*'
              - '.github/workflows/**'

  # 🔍 バックエンドLint
  backend-lint:
    needs: [essential-checks]
    if: needs.essential-checks.result == 'success' && needs.essential-checks.outputs.backend == 'true'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        working-directory: ./backend
        run: go mod download

      - name: Run linting
        working-directory: ./backend
        run: |
          echo "🔍 Running Go linting..."
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          golangci-lint run --timeout=5m
          echo "✅ Linting passed"

  # 🔨 バックエンドビルド
  backend-build:
    needs: [essential-checks]
    if: needs.essential-checks.result == 'success' && needs.essential-checks.outputs.backend == 'true'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        working-directory: ./backend
        run: go mod download

      - name: Build application
        working-directory: ./backend
        run: |
          echo "🔨 Building Go application..."
          go build -o app ./cmd/main.go
          echo "✅ Build successful"

  # 🔍 フロントエンドLint
  frontend-lint:
    needs: [essential-checks]
    if: needs.essential-checks.result == 'success' && needs.essential-checks.outputs.frontend == 'true'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: |
          echo "📦 Installing dependencies..."
          npm ci --prefer-offline --no-audit

      - name: Run ESLint
        working-directory: ./frontend
        run: |
          echo "🔍 Running ESLint..."
          npm run lint
          echo "✅ ESLint passed"

      - name: Run type check
        working-directory: ./frontend
        run: |
          echo "🔍 Running TypeScript type check..."
          npm run type-check
          echo "✅ Type check passed"

  # 🔨 フロントエンドビルド
  frontend-build:
    needs: [essential-checks]
    if: needs.essential-checks.result == 'success' && needs.essential-checks.outputs.frontend == 'true'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: |
          echo "📦 Installing dependencies..."
          npm ci --prefer-offline --no-audit

      - name: Build application
        working-directory: ./frontend
        run: |
          echo "🔨 Building Next.js application..."
          npm run build
          echo "✅ Build successful"
