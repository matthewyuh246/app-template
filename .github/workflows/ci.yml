name: CI Pipeline

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: "18"
  GO_VERSION: "1.24"

jobs:
  # 変更ファイル検出 (共通)
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
    steps:
      - uses: actions/checkout@v4

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
              - 'api/**'
              - 'database/**'
              - 'go.mod'
              - 'go.sum'
            frontend:
              - 'frontend/**'
              - 'package*.json'

  # 1. ブランチ名検証
  branch-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.base_ref == 'main'
    steps:
      - name: Check branch naming convention
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          echo "🔍 Checking branch name: $BRANCH_NAME"

          if [[ ! "$BRANCH_NAME" =~ ^develop/.+ ]]; then
            echo "❌ Error: Pull requests to main branch must come from 'develop/' branches"
            echo "Current branch: $BRANCH_NAME"
            echo "Expected pattern: develop/feature-name"
            exit 1
          fi

          echo "✅ Branch name follows convention: $BRANCH_NAME"

  # 2. バックエンドビルド
  backend-build:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build backend
        run: |
          echo "🔧 Setting up Go environment..."
          cd backend
          go mod download

          echo "🏗️ Building backend..."
          go build -o bin/app cmd/main.go

          echo "✅ Backend build completed!"

  # 3. バックエンドLint
  backend-lint:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run Go lint
        run: |
          echo "🔧 Setting up Go environment..."
          cd backend
          go mod download

          echo "🔍 Installing golangci-lint..."
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

          echo "🔍 Running Go lint..."
          golangci-lint run --timeout=5m

          echo "✅ Backend lint completed!"

  # 4. フロントエンドビルド
  frontend-build:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Build frontend
        run: |
          echo "🔧 Setting up Node.js environment..."
          cd frontend
          npm ci --prefer-offline --no-audit

          echo "🔍 Running TypeScript type check..."
          npm run type-check

          echo "🏗️ Building frontend..."
          npm run build

          echo "✅ Frontend build completed!"

  # 5. フロントエンドLint
  frontend-lint:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Run frontend lint
        run: |
          echo "🔧 Setting up Node.js environment..."
          cd frontend
          npm ci --prefer-offline --no-audit

          echo "🔍 Running ESLint..."
          npm run lint

          echo "✅ Frontend lint completed!"
