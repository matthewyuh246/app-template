name: Manual Test Suite

on:
  workflow_dispatch:
    inputs:
      test_type:
        description: "Select test type to run"
        required: true
        default: "all"
        type: choice
        options:
          - all
          - backend-only
          - frontend-only
          - integration-only
          - security-only

env:
  NODE_VERSION: "18"
  GO_VERSION: "1.24"

jobs:
  # バックエンドテスト
  backend-tests:
    if: contains(github.event.inputs.test_type, 'backend') || github.event.inputs.test_type == 'all'
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: test_db
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        working-directory: ./backend
        run: go mod download

      - name: Run backend tests
        working-directory: ./backend
        env:
          DB_HOST: localhost
          DB_PORT: 3306
          DB_USER: root
          DB_PASSWORD: password
          DB_NAME: test_db
          REDIS_HOST: localhost
          REDIS_PORT: 6379
        run: |
          if find . -name "*_test.go" -type f | grep -q .; then
            echo "🧪 Running backend tests..."
            go test -v -race -coverprofile=coverage.out ./...
            go tool cover -html=coverage.out -o coverage.html
          else
            echo "⏭️ No backend test files found"
          fi

  # フロントエンドテスト
  frontend-tests:
    if: contains(github.event.inputs.test_type, 'frontend') || github.event.inputs.test_type == 'all'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci --prefer-offline --no-audit

      - name: Run frontend tests
        working-directory: ./frontend
        run: |
          if find . -name "*.test.*" -o -name "*.spec.*" | grep -q .; then
            echo "🧪 Running frontend tests..."
            npm run test -- --coverage --watchAll=false
          else
            echo "⏭️ No frontend test files found"
          fi

  # 統合テスト
  integration-tests:
    if: contains(github.event.inputs.test_type, 'integration') || github.event.inputs.test_type == 'all'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run integration tests
        run: |
          echo "🐳 Starting integration tests..."

          cat > .env << EOF
          MYSQL_ROOT_PASSWORD=test_password
          MYSQL_DATABASE=app_template_test
          MYSQL_USER=app_user
          MYSQL_PASSWORD=app_password
          DB_HOST=mysql
          DB_PORT=3306
          DB_USER=app_user
          DB_PASSWORD=app_password
          DB_NAME=app_template_test
          JWT_SECRET=test_jwt_secret_key_for_ci
          NEXT_PUBLIC_API_BASE_URL=http://localhost:8080
          EOF

          docker-compose -f docker-compose.yml up -d --build

          # Wait for services
          timeout 60 bash -c 'until curl -f http://localhost:8080/health; do sleep 2; done'
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

          # Test endpoints
          curl -f http://localhost:8080/health
          curl -f http://localhost:3000

          echo "✅ Integration tests completed"

          # Cleanup
          docker-compose down -v

  # セキュリティスキャン
  security-scan:
    if: contains(github.event.inputs.test_type, 'security') || github.event.inputs.test_type == 'all'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results.sarif"
